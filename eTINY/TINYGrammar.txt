program -> stmt-sequence
stmt-sequence -> statement  ; statement | statement
statement -> if-stmt | repeat-stmt | assign-stmt | read-stmt | write-stmt | for-stmt

if-stmt -> if(exp) stmt-sequence [else stmt-sequence]
repeat-stmt -> repeat stmt-sequence until exp
assign-stmt -> identifier ( assignop exp | := regex )
read-stmt -> read identifier
write-stmt -> write exp
for-stmt -> for identifier=simple-exp (to simple-exp do stmt-sequence enddo | downto simple-exp do stmt-sequence enddo)

assignop -> = | -=

exp -> simple-exp [comparison-op simple-exp]
comparison-op -> <= | >= | < | > | <> | ==

simple-exp -> term addop term | term
addop -> + | -
term -> power { mulop power }
mulop -> * | / | %
power -> factor { ^ factor }
factor -> (exp) | number | identifier

condition -> orterm {or orterm}
orterm -> andterm {and andterm}
andterm -> [not] notterm
notterm -> (condition) | exp

regex -> reorterm { | reorterm }
reorterm -> reandterm { & reandterm }
reandterm -> recloterm [#]
recloterm -> (regex) | identifier
